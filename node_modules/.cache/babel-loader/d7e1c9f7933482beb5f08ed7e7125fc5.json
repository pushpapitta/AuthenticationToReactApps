{"ast":null,"code":"var _jsxFileName = \"/Users/shanthakumarpitta/Downloads/AuthenticationToReactApps/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: '',\n  isLoggedIn: false,\n  //functions which allow us to change above state\n  login: token => {},\n  logout: () => {}\n}); //wrapper component,and also state management to the aboove authcontext is done here\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const initialToken = localStorage.getItem('token'); //state for token\n\n  const [token, setToken] = useState(initialToken); //no token,user is not loggen in, if token- user is logged in\n\n  const userIsLoggedIn = !!token; //if token is string-returns true,not string-returns false(js trick)\n  //below functions are to change token state\n\n  const loginHandler = token => {\n    setToken(token); //storing a string token in 'token' key in local storage\n\n    localStorage.setItem('token', token);\n  };\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem('token');\n  }; //constructing our contextValue object\n\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/shanthakumarpitta/Downloads/AuthenticationToReactApps/src/store/auth-context.js"],"names":["React","useState","AuthContext","createContext","token","isLoggedIn","login","logout","AuthContextProvider","props","initialToken","localStorage","getItem","setToken","userIsLoggedIn","loginHandler","setItem","logoutHandler","removeItem","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AACpCC,EAAAA,KAAK,EAAE,EAD6B;AAEpCC,EAAAA,UAAU,EAAE,KAFwB;AAGpC;AACAC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAG,CAJe;AAKpCG,EAAAA,MAAM,EAAE,MAAM,CAAG;AALmB,CAApB,CAApB,C,CAOA;;AACA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC1C,QAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB,CAD0C,CAE1C;;AACA,QAAM,CAACR,KAAD,EAAQS,QAAR,IAAoBZ,QAAQ,CAACS,YAAD,CAAlC,CAH0C,CAK1C;;AACA,QAAMI,cAAc,GAAG,CAAC,CAACV,KAAzB,CAN0C,CAMX;AAC/B;;AACA,QAAMW,YAAY,GAAIX,KAAD,IAAW;AAC5BS,IAAAA,QAAQ,CAACT,KAAD,CAAR,CAD4B,CAE5B;;AACAO,IAAAA,YAAY,CAACK,OAAb,CAAqB,OAArB,EAA8BZ,KAA9B;AACH,GAJD;;AAKA,QAAMa,aAAa,GAAG,MAAM;AACxBJ,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,IAAAA,YAAY,CAACO,UAAb,CAAwB,OAAxB;AACH,GAHD,CAb0C,CAiB1C;;;AACA,QAAMC,YAAY,GAAG;AACjBf,IAAAA,KAAK,EAAEA,KADU;AAEjBC,IAAAA,UAAU,EAAES,cAFK;AAGjBR,IAAAA,KAAK,EAAES,YAHU;AAIjBR,IAAAA,MAAM,EAAEU;AAJS,GAArB;AAMA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,YAA7B;AAAA,cAA4CV,KAAK,CAACW;AAAlD;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAzBM;;GAAMZ,mB;;KAAAA,mB;AA2Bb,eAAeN,WAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst AuthContext = React.createContext({\n    token: '',\n    isLoggedIn: false,\n    //functions which allow us to change above state\n    login: (token) => { },\n    logout: () => { }\n});\n//wrapper component,and also state management to the aboove authcontext is done here\nexport const AuthContextProvider = (props) => {\n    const initialToken = localStorage.getItem('token');\n    //state for token\n    const [token, setToken] = useState(initialToken);\n\n    //no token,user is not loggen in, if token- user is logged in\n    const userIsLoggedIn = !!token;//if token is string-returns true,not string-returns false(js trick)\n    //below functions are to change token state\n    const loginHandler = (token) => {\n        setToken(token);\n        //storing a string token in 'token' key in local storage\n        localStorage.setItem('token', token);\n    };\n    const logoutHandler = () => {\n        setToken(null);\n        localStorage.removeItem('token');\n    };\n    //constructing our contextValue object\n    const contextValue = {\n        token: token,\n        isLoggedIn: userIsLoggedIn,\n        login: loginHandler,\n        logout: logoutHandler\n    };\n    return <AuthContext.Provider value={contextValue}>{props.children}</AuthContext.Provider>;\n};\n\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}