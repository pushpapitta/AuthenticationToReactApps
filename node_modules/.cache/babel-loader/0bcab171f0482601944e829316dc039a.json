{"ast":null,"code":"var _jsxFileName = \"/Users/shanthakumarpitta/Downloads/AuthenticationToReactApps/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: '',\n  isLoggedIn: false,\n  //functions which allow us to change above state\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = newDate().getTime();\n  const adjExpirationTime = newDate(expirationTime).getTime();\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n}; //wrapper component,and also state management to the aboove authcontext is done here\n\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  //persistence of login status  using token stored in localstorage\n  const initialToken = localStorage.getItem('token'); //state for token\n\n  const [token, setToken] = useState(initialToken); //no token,user is not loggen in, if token- user is logged in\n\n  const userIsLoggedIn = !!token; //if token is string-returns true,not string-returns false(js trick)\n  //below functions are to change token state\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem('token');\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token); //storing a string token in 'token' key in local storage\n\n    localStorage.setItem('token', token);\n    const remainingTime = calculateRemainingTime(expirationTime); //automatically logouts the user after timeout\n\n    setTimeout(logoutHandler, remainingTime);\n  }; //constructing our contextValue object\n\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/shanthakumarpitta/Downloads/AuthenticationToReactApps/src/store/auth-context.js"],"names":["React","useState","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","newDate","getTime","adjExpirationTime","remainingDuration","AuthContextProvider","props","initialToken","localStorage","getItem","setToken","userIsLoggedIn","logoutHandler","removeItem","loginHandler","setItem","remainingTime","setTimeout","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AACpCC,EAAAA,KAAK,EAAE,EAD6B;AAEpCC,EAAAA,UAAU,EAAE,KAFwB;AAGpC;AACAC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAG,CAJe;AAKpCG,EAAAA,MAAM,EAAE,MAAM,CAAG;AALmB,CAApB,CAApB;;AAQA,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;AAE/C,QAAMC,WAAW,GAAGC,OAAO,GAAGC,OAAV,EAApB;AACA,QAAMC,iBAAiB,GAAGF,OAAO,CAACF,cAAD,CAAP,CAAwBG,OAAxB,EAA1B;AAEA,QAAME,iBAAiB,GAAGD,iBAAiB,GAAGH,WAA9C;AACA,SAAOI,iBAAP;AACH,CAPD,C,CAQA;;;AACA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC1C;AACA,QAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB,CAF0C,CAG1C;;AACA,QAAM,CAACf,KAAD,EAAQgB,QAAR,IAAoBnB,QAAQ,CAACgB,YAAD,CAAlC,CAJ0C,CAM1C;;AACA,QAAMI,cAAc,GAAG,CAAC,CAACjB,KAAzB,CAP0C,CAOX;AAE/B;;AAEA,QAAMkB,aAAa,GAAG,MAAM;AACxBF,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,IAAAA,YAAY,CAACK,UAAb,CAAwB,OAAxB;AACH,GAHD;;AAIA,QAAMC,YAAY,GAAG,CAACpB,KAAD,EAAQK,cAAR,KAA2B;AAC5CW,IAAAA,QAAQ,CAAChB,KAAD,CAAR,CAD4C,CAE5C;;AACAc,IAAAA,YAAY,CAACO,OAAb,CAAqB,OAArB,EAA8BrB,KAA9B;AAEA,UAAMsB,aAAa,GAAGlB,sBAAsB,CAACC,cAAD,CAA5C,CAL4C,CAM5C;;AACAkB,IAAAA,UAAU,CAACL,aAAD,EAAgBI,aAAhB,CAAV;AACH,GARD,CAf0C,CAwB1C;;;AACA,QAAME,YAAY,GAAG;AACjBxB,IAAAA,KAAK,EAAEA,KADU;AAEjBC,IAAAA,UAAU,EAAEgB,cAFK;AAGjBf,IAAAA,KAAK,EAAEkB,YAHU;AAIjBjB,IAAAA,MAAM,EAAEe;AAJS,GAArB;AAMA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEM,YAA7B;AAAA,cAA4CZ,KAAK,CAACa;AAAlD;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAhCM;;GAAMd,mB;;KAAAA,mB;AAkCb,eAAeb,WAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst AuthContext = React.createContext({\n    token: '',\n    isLoggedIn: false,\n    //functions which allow us to change above state\n    login: (token) => { },\n    logout: () => { }\n});\n\nconst calculateRemainingTime = (expirationTime) => {\n\n    const currentTime = newDate().getTime();\n    const adjExpirationTime = newDate(expirationTime).getTime();\n\n    const remainingDuration = adjExpirationTime - currentTime;\n    return remainingDuration;\n};\n//wrapper component,and also state management to the aboove authcontext is done here\nexport const AuthContextProvider = (props) => {\n    //persistence of login status  using token stored in localstorage\n    const initialToken = localStorage.getItem('token');\n    //state for token\n    const [token, setToken] = useState(initialToken);\n\n    //no token,user is not loggen in, if token- user is logged in\n    const userIsLoggedIn = !!token;//if token is string-returns true,not string-returns false(js trick)\n\n    //below functions are to change token state\n\n    const logoutHandler = () => {\n        setToken(null);\n        localStorage.removeItem('token');\n    };\n    const loginHandler = (token, expirationTime) => {\n        setToken(token);\n        //storing a string token in 'token' key in local storage\n        localStorage.setItem('token', token);\n\n        const remainingTime = calculateRemainingTime(expirationTime);\n        //automatically logouts the user after timeout\n        setTimeout(logoutHandler, remainingTime);\n    };\n    //constructing our contextValue object\n    const contextValue = {\n        token: token,\n        isLoggedIn: userIsLoggedIn,\n        login: loginHandler,\n        logout: logoutHandler\n    };\n    return <AuthContext.Provider value={contextValue}>{props.children}</AuthContext.Provider>;\n};\n\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}